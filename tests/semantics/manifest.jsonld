{
  "@context": {
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "mf": "http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#",
    "rdft": "http://www.w3.org/ns/rdftest#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "qt": "http://www.w3.org/2001/sw/DataAccess/tests/test-query#",
    "ut": "http://www.w3.org/2009/sparql/tests/test-update#",
    "test": "http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#",
    "trs": "https://w3c.github.io/rdf-star/tests/semantics#",
    "@vocab": "http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#",
    "@base": "https://w3c.github.io/rdf-star/tests/semantics/",
    "include": {
      "@type": "@id",
      "@container": "@list"
    },
    "entries": {
      "@type": "@id",
      "@container": "@list"
    },
    "recognizedDatatypes": {
      "@type": "@id",
      "@container": "@list"
    },
    "unrecognizedDatatypes": {
      "@type": "@id",
      "@container": "@list"
    },
    "action": {
      "@type": "@id"
    },
    "qt:query": {
      "@type": "@id"
    },
    "qt:data": {
      "@type": "@id"
    },
    "ut:request": {
      "@type": "@id"
    },
    "ut:data": {
      "@type": "@id"
    },
    "result": {
      "@type": "@id"
    },
    "label": "rdfs:label",
    "comment": "rdfs:comment",
    "seeAlso": {
      "@id": "rdfs:seeAlso",
      "@type": "@id"
    },
    "approval": {
      "@id": "test:approval",
      "@type": "@vocab",
      "@context": {
        "Approved": "test:Approved",
        "Proposed": "test:NotClassified",
        "NotClassified": "test:NotClassified",
        "Rejected": "test:Rejected",
        "Obsoleted": "test:Obsoleted",
        "Withdrawn": "test:Withdrawn"
      }
    },
    "TestTurtlePositiveSyntax": "rdft:TestTurtlePositiveSyntax",
    "TestTurtleNegativeSyntax": "rdft:TestTurtleNegativeSyntax",
    "statusOf": {
      "@reverse": "test:approval"
    }
  },
  "@id": "trs:manifest",
  "@included": [
    {
      "@id": "trs:malformed-literal-bnode-3",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Withdrawn",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal-3a.ttl",
      "comment": "Identical malformed literals can not be replaced with the same blank node (withdrawn as the current semantics does not enforce this).",
      "name": "malformed-literal-bnode-3",
      "result": "malformed-literal-3r.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:malformed-literal-bnode",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Withdrawn",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal.ttl",
      "comment": "Malformed literals can be replaced by blank nodes (withdrawn as the current semantics does not enforce this).",
      "name": "malformed-literal-bnode",
      "result": "test002or.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:triple-in-object",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Withdrawn",
      "unrecognizedDatatypes": [

      ],
      "action": "test000o.ttl",
      "comment": "Embedded triples can appear in object position (withdrawn, as it belongs to concrete syntax test-suites).",
      "name": "triple-in-object",
      "result": "test000o.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:triple-in-subject",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Withdrawn",
      "unrecognizedDatatypes": [

      ],
      "action": "test000s.ttl",
      "comment": "Embedded triples can appear in subject position (withdrawn, as it belongs to concrete syntax test-suites).",
      "name": "triple-in-subject",
      "result": "test000s.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:malformed-literal-bnode-2",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Withdrawn",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal-2a.ttl",
      "comment": "Identical malformed literals can be replaced with the same blank node  (withdrawn as the current semantics does not enforce this).",
      "name": "malformed-literal-bnode-2",
      "result": "malformed-literal-2r.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    }
  ],
  "@type": "Manifest",
  "label": "RDF-star Semantics tests",
  "seeAlso": "README",
  "entries": [
    {
      "@id": "trs:all-identical-embedded-triples-are-the-same",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test001a.ttl",
      "comment": "Multiple occurences of the same embedded triples are undistinguishable in the abstract model.",
      "name": "all-identical-embedded-triples-are-the-same",
      "result": "test001r.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:embedded-triples-no-spurious",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test002a.ttl",
      "comment": "This test ensures that other entailments are not spurious.",
      "name": "embedded-triples-no-spurious",
      "result": "test005.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:bnodes-in-embedded-subject",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test002a.ttl",
      "comment": "Terms in embedded triples can be replaced by fresh bnodes.",
      "name": "bnodes-in-embedded-subject",
      "result": "test002sr.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:bnodes-in-embedded-object",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test002a.ttl",
      "comment": "Terms in embedded triples can be replaced by fresh bnodes.",
      "name": "bnodes-in-embedded-object",
      "result": "test002or.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:bnodes-in-embedded-subject-and-object",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test002a.ttl",
      "comment": "Terms in embedded triples can be replaced by fresh bnodes.",
      "name": "bnodes-in-embedded-subject-and-object",
      "result": "test002sor.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:bnodes-in-embedded-subject-and-object-fail",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test002a.ttl",
      "comment": "The same bnode can not match different embedded terms.",
      "name": "bnodes-in-embedded-subject-and-object-fail",
      "result": "test002sbr.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:same-bnode-same-embedded-term",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test003a.ttl",
      "comment": "Identical embedded term can be replaced by the same fresh bnode multiple times.",
      "name": "same-bnode-same-embedded-term",
      "result": "test002sbr.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:different-bnodes-same-embedded-term",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test003a.ttl",
      "comment": "Different bnodes can match identical embedded terms.",
      "name": "different-bnodes-same-embedded-term",
      "result": "test002sor.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:constrained-bnodes-in-embedded-subject",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test004a.ttl",
      "comment": "Terms in embedded triples and outside can be replaced by fresh bnodes",
      "name": "constrained-bnodes-in-embedded-subject",
      "result": "test004sr.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:constrained-bnodes-in-embedded-object",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test004a.ttl",
      "comment": "Terms in embedded triples and outside can be replaced by fresh bnodes.",
      "name": "constrained-bnodes-in-embedded-object",
      "result": "test004or.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:constrained-bnodes-in-embedded-fail",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test004a.ttl",
      "comment": "Embedded bnode identifiers share the same scope as non-embedded ones. A bnode occuring both in embedded triples and in asserted triples must statisfy them all at the same time.",
      "name": "constrained-bnodes-in-embedded-fail",
      "result": "test004fr.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:constrained-bnodes-on-literal",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test006a.ttl",
      "comment": "Literals in embedded triples and outside can be replaced by fresh bnodes.",
      "name": "constrained-bnodes-on-literal",
      "result": "test006r.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:malformed-literal-control",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal-control.ttl",
      "comment": "Checks that xsd:integer is indeed recognized, to ensure that malformed-literal-* tests do not pass spuriously.",
      "name": "malformed-literal-control",
      "mf:result": false,
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:malformed-literal",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal.ttl",
      "comment": "Malformed literals are allowed when embedded.",
      "name": "malformed-literal",
      "mf:result": false,
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:malformed-literal-accepted",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal.ttl",
      "comment": "Malformed literals are allowed when embedded.",
      "name": "malformed-literal-accepted",
      "result": "malformed-literal.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:malformed-literal-no-spurious",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal.ttl",
      "comment": "Embedded malformed literals do not lead to spurious entailment.",
      "name": "malformed-literal-no-spurious",
      "result": "malformed-literal-other.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:malformed-literal-bnode-neg",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "malformed-literal.ttl",
      "comment": "Malformed literals can not be replaced by blank nodes.",
      "name": "malformed-literal-bnode",
      "result": "test002or.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:opaque-literal-control",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "non-canonical-literal-control.ttl",
      "comment": "Checks that xsd:integer is indeed recognized, to ensure that opaque-literal does not pass spuriously.",
      "name": "opaque-literal-control",
      "result": "canonical-literal-control.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:opaque-literal",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "non-canonical-literal.ttl",
      "comment": "Embedded literals are opaque, even when their datatype is recognized.",
      "name": "opaque-literal",
      "result": "canonical-literal.ttl",
      "recognizedDatatypes": [
        "xsd:integer"
      ]
    },
    {
      "@id": "trs:opaque-language-string-control",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "lowercase-language-string-control.ttl",
      "comment": "Checks that language strings are indeed recognized, to ensure that opaque-language-string does not pass spuriously.",
      "name": "opaque-language-string-control",
      "result": "upercase-language-string-control.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:opaque-language-string",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "RDF",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "lowercase-language-string.ttl",
      "comment": "Embedded literals (including language strings) are opaque, even when their datatype is recognized.",
      "name": "opaque-language-string",
      "result": "upercase-language-string.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:opaque-iri-control",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "RDFS-Plus",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "control-sameas-a.ttl",
      "comment": "Check that owl:sameAs works as expected, to ensure that opaque-iri does not pass spuriously.",
      "name": "opaque-iri-control",
      "result": "control-sameas-r.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:opaque-iri",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "RDFS-Plus",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "superman.ttl",
      "comment": "Embedded IRIs are opaque.",
      "name": "opaque-iri",
      "result": "superman_undesired_entailment.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:embedded-not-asserted",
      "@type": "NegativeEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test002a.ttl",
      "comment": "Embedded triples are not asserted.",
      "name": "embedded-not-asserted",
      "result": "test002pgr.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:annotated-asserted",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test007a.ttl",
      "comment": "Annotated triples are asserted.",
      "name": "annotated-asserted",
      "result": "test007r1.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:annotation",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test007a.ttl",
      "comment": "Annotation are about the annotated triple.",
      "name": "annotation",
      "result": "test007r2.ttl",
      "recognizedDatatypes": [

      ]
    },
    {
      "@id": "trs:annotation-unfolded",
      "@type": "PositiveEntailmentTest",
      "entailmentRegime": "simple",
      "approval": "Proposed",
      "unrecognizedDatatypes": [

      ],
      "action": "test007a2.ttl",
      "comment": "Annotation is the same as separate assertions.",
      "name": "annotation-unfolded",
      "result": "test007a.ttl",
      "recognizedDatatypes": [

      ]
    }
  ]
}
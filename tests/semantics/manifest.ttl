PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:   <http://www.w3.org/2000/01/rdf-schema#>
PREFIX mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
PREFIX test:   <http://www.w3.org/2001/sw/DataAccess/tests/>
PREFIX xsd:    <http://www.w3.org/2001/XMLSchema#>
PREFIX :       <#>

<> a mf:Manifest;
  rdfs:comment "RDF* Semantics tests";
  rdfs:seeAlso <README>;
  mf:entries (
    :triple-in-subject
    :triple-in-object
    :all-identical-embedded-triples-are-the-same
    :embedded-triples-no-spurious
    :bnodes-in-embedded-subject
    :bnodes-in-embedded-object
    :bnodes-in-embedded-subject-and-object
    :bnodes-in-embedded-subject-and-object-fail
    :same-bnode-same-embedded-term
    :different-bnodes-same-embedded-term
    :constrained-bnodes-in-embedded-subject
    :constrained-bnodes-in-embedded-object
    :constrained-bnodes-in-embedded-fail
    :constrained-bnodes-on-literal
    :malformed-literal-control
    :malformed-literal
    :malformed-literal-accepted
    :malformed-literal-no-spurious
    :malformed-literal-bnode
    :malformed-literal-bnode-2
    :malformed-literal-bnode-3
    :opaque-literal-control
    :opaque-literal
    :opaque-language-string-control
    :opaque-language-string
    :opaque-iri-control
    :opaque-iri
    :embedded-not-asserted
    :annotated-asserted
    :annotation
    :annotation-unfolded
  ) .

:all-identical-embedded-triples-are-the-same a mf:PositiveEntailmentTest;
  rdfs:comment "Multiple occurences of the same embedded triples are undistinguishable in the abstract model (EVENTUALLY, this should be a Turtle* test rather than a semantics test).";
  mf:action <test001a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "all-identical-embedded-triples-are-the-same";
  mf:recognizedDatatypes ();
  mf:result <test001r.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:annotated-asserted a mf:PositiveEntailmentTest;
  rdfs:comment "Annotated triples are asserted.";
  mf:action <test007a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "annotated-asserted";
  mf:recognizedDatatypes ();
  mf:result <test007r1.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:annotation a mf:PositiveEntailmentTest;
  rdfs:comment "Annotation are about the annotated triple.";
  mf:action <test007a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "annotation";
  mf:recognizedDatatypes ();
  mf:result <test007r2.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:annotation-unfolded a mf:PositiveEntailmentTest;
  rdfs:comment "Annotation is the same as separate assertions.";
  mf:action <test007a2.ttl>;
  mf:entailmentRegime "simple";
  mf:name "annotation-unfolded";
  mf:recognizedDatatypes ();
  mf:result <test007a.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:bnodes-in-embedded-object a mf:PositiveEntailmentTest;
  rdfs:comment "Terms in embedded triples can be replaced by fresh bnodes.";
  mf:action <test002a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "bnodes-in-embedded-object";
  mf:recognizedDatatypes ();
  mf:result <test002or.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:bnodes-in-embedded-subject a mf:PositiveEntailmentTest;
  rdfs:comment "Terms in embedded triples can be replaced by fresh bnodes.";
  mf:action <test002a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "bnodes-in-embedded-subject";
  mf:recognizedDatatypes ();
  mf:result <test002sr.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:bnodes-in-embedded-subject-and-object a mf:PositiveEntailmentTest;
  rdfs:comment "Terms in embedded triples can be replaced by fresh bnodes.";
  mf:action <test002a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "bnodes-in-embedded-subject-and-object";
  mf:recognizedDatatypes ();
  mf:result <test002sor.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:bnodes-in-embedded-subject-and-object-fail a mf:NegativeEntailmentTest;
  rdfs:comment "The same bnode can not match different embedded terms.";
  mf:action <test002a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "bnodes-in-embedded-subject-and-object-fail";
  mf:recognizedDatatypes ();
  mf:result <test002sbr.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:constrained-bnodes-in-embedded-fail a mf:NegativeEntailmentTest;
  rdfs:comment "Embedded bnode identifiers share the same scope as non-embedded ones. A bnode occuring both in embedded triples and in asserted triples must statisfy them all at the same time.";
  mf:action <test004a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "constrained-bnodes-in-embedded-fail";
  mf:recognizedDatatypes ();
  mf:result <test004fr.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:constrained-bnodes-in-embedded-object a mf:PositiveEntailmentTest;
  rdfs:comment "Terms in embedded triples and outside can be replaced by fresh bnodes.";
  mf:action <test004a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "constrained-bnodes-in-embedded-object";
  mf:recognizedDatatypes ();
  mf:result <test004or.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:constrained-bnodes-in-embedded-subject a mf:PositiveEntailmentTest;
  rdfs:comment "Terms in embedded triples and outside can be replaced by fresh bnodes";
  mf:action <test004a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "constrained-bnodes-in-embedded-subject";
  mf:recognizedDatatypes ();
  mf:result <test004sr.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:constrained-bnodes-on-literal a mf:PositiveEntailmentTest;
  rdfs:comment "Literals in embedded triples and outside can be replaced by fresh bnodes.";
  mf:action <test006a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "constrained-bnodes-on-literal";
  mf:recognizedDatatypes ();
  mf:result <test006r.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:different-bnodes-same-embedded-term a mf:PositiveEntailmentTest;
  rdfs:comment "Different bnodes can match identical embedded terms.";
  mf:action <test003a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "different-bnodes-same-embedded-term";
  mf:recognizedDatatypes ();
  mf:result <test002sor.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:embedded-not-asserted a mf:NegativeEntailmentTest;
  rdfs:comment "Embedded triples are not asserted.";
  mf:action <test002a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "embedded-not-asserted";
  mf:recognizedDatatypes ();
  mf:result <test002pgr.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:embedded-triples-no-spurious a mf:NegativeEntailmentTest;
  rdfs:comment "This test ensures that other entailments are not spurious.";
  mf:action <test002a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "embedded-triples-no-spurious";
  mf:recognizedDatatypes ();
  mf:result <test005.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:malformed-literal a mf:NegativeEntailmentTest;
  rdfs:comment "Malformed literals are allowed when embedded.";
  mf:action <malformed-literal.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "malformed-literal";
  mf:recognizedDatatypes (xsd:integer);
  mf:result false;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:malformed-literal-accepted a mf:PositiveEntailmentTest;
  rdfs:comment "Malformed literals are allowed when embedded.";
  mf:action <malformed-literal.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "malformed-literal-accepted";
  mf:recognizedDatatypes (xsd:integer);
  mf:result <malformed-literal.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:malformed-literal-bnode a mf:PositiveEntailmentTest;
  rdfs:comment "Malformed literals can be replaced by blank nodes.";
  mf:action <malformed-literal.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "malformed-literal-bnode";
  mf:recognizedDatatypes (xsd:integer);
  mf:result <test002or.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:malformed-literal-bnode-2 a mf:PositiveEntailmentTest;
  rdfs:comment "Identical malformed literals can be replaced with the same blank node.";
  mf:action <malformed-literal-2a.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "malformed-literal-bnode-2";
  mf:recognizedDatatypes (xsd:integer);
  mf:result <malformed-literal-2r.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:malformed-literal-bnode-3 a mf:NegativeEntailmentTest;
  rdfs:comment "Identical malformed literals can not be replaced with the same blank node.";
  mf:action <malformed-literal-3a.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "malformed-literal-bnode-3";
  mf:recognizedDatatypes (xsd:integer);
  mf:result <malformed-literal-3r.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:malformed-literal-control a mf:PositiveEntailmentTest;
  rdfs:comment "Checks that xsd:integer is indeed recognized, to ensure that malformed-literal* tests do not pass spuriously.";
  mf:action <malformed-literal-control.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "malformed-literal-control";
  mf:recognizedDatatypes (xsd:integer);
  mf:result false;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:malformed-literal-no-spurious a mf:NegativeEntailmentTest;
  rdfs:comment "Embedded malformed literals do not lead to spurious entailment.";
  mf:action <malformed-literal.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "malformed-literal-no-spurious";
  mf:recognizedDatatypes (xsd:integer);
  mf:result <malformed-literal-other.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:opaque-iri a mf:NegativeEntailmentTest;
  rdfs:comment "Embedded IRIs are opaque.";
  mf:action <superman.ttl>;
  mf:entailmentRegime "RDFS-Plus";
  mf:name "opaque-iri";
  mf:recognizedDatatypes ();
  mf:result <superman_undesired_entailment.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:opaque-iri-control a mf:PositiveEntailmentTest;
  rdfs:comment "Check that owl:sameAs works as expected, to ensure that opaque-iri does not pass spuriously.";
  mf:action <control-sameas-a.ttl>;
  mf:entailmentRegime "RDFS-Plus";
  mf:name "opaque-iri-control";
  mf:recognizedDatatypes ();
  mf:result <control-sameas-r.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:opaque-language-string a mf:NegativeEntailmentTest;
  rdfs:comment "Embedded literals (including language strings) are opaque, even when their datatype is recognized.";
  mf:action <lowercase-language-string.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "opaque-language-string";
  mf:recognizedDatatypes ();
  mf:result <upercase-language-string.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:opaque-language-string-control a mf:PositiveEntailmentTest;
  rdfs:comment "Checks that language strings are indeed recognized, to ensure that opaque-language-string does not pass spuriously.";
  mf:action <lowercase-language-string-control.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "opaque-language-string-control";
  mf:recognizedDatatypes ();
  mf:result <upercase-language-string-control.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:opaque-literal a mf:NegativeEntailmentTest;
  rdfs:comment "Embedded literals are opaque, even when their datatype is recognized.";
  mf:action <non-canonical-literal.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "opaque-literal";
  mf:recognizedDatatypes (xsd:integer);
  mf:result <canonical-literal.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:opaque-literal-control a mf:PositiveEntailmentTest;
  rdfs:comment "Checks that xsd:integer is indeed recognized, to ensure that opaque-literal does not pass spuriously.";
  mf:action <non-canonical-literal-control.ttl>;
  mf:entailmentRegime "RDF";
  mf:name "opaque-literal-control";
  mf:recognizedDatatypes (xsd:integer);
  mf:result <canonical-literal-control.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:same-bnode-same-embedded-term a mf:PositiveEntailmentTest;
  rdfs:comment "Identical embedde term can be replaced by the same fresh bnode multiple times.";
  mf:action <test003a.ttl>;
  mf:entailmentRegime "simple";
  mf:name "same-bnode-same-embedded-term";
  mf:recognizedDatatypes ();
  mf:result <test002sbr.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Proposed .

:triple-in-object a mf:PositiveEntailmentTest;
  rdfs:comment "Embedded triples can appear in object position (EVENTUALLY, this should be a Turtle* test rather than a semantics test).";
  mf:action <test000o.ttl>;
  mf:entailmentRegime "simple";
  mf:name "triple-in-object";
  mf:recognizedDatatypes ();
  mf:result <test000o.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Approved .

:triple-in-subject a mf:PositiveEntailmentTest;
  rdfs:comment "Embedded triples can appear in subject position (EVENTUALLY, this should be a Turtle* test rather than a semantics test).";
  mf:action <test000s.ttl>;
  mf:entailmentRegime "simple";
  mf:name "triple-in-subject";
  mf:recognizedDatatypes ();
  mf:result <test000s.ttl>;
  mf:unrecognizedDatatypes ();
  test:approval test:Approved .